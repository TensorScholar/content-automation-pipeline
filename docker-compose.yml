# ============================================================================
# Docker Compose Configuration
# Complete system orchestration with dependencies
# ============================================================================

version: '3.9'

services:
  # --------------------------------------------------------------------------
  # PostgreSQL Database
  # --------------------------------------------------------------------------
  postgres:
    image: postgres:15-alpine
    container_name: content-automation-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: content_automation
      POSTGRES_USER: content_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_change_me}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U content_user -d content_automation"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - content-automation-network

  # --------------------------------------------------------------------------
  # Redis Cache
  # --------------------------------------------------------------------------
  redis:
    image: redis:7-alpine
    container_name: content-automation-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - content-automation-network

  # --------------------------------------------------------------------------
  # API Server
  # --------------------------------------------------------------------------
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: content-automation-api
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database configuration
      DATABASE_URL: postgresql://content_user:${POSTGRES_PASSWORD:-secure_password_change_me}@postgres:5432/content_automation
      
      # Redis configuration
      REDIS_URL: redis://redis:6379/0
      
      # LLM API keys (set in .env file)
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      
      # Application configuration
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      
      # Telegram (optional)
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN:-}
      
      # Security
      SECRET_KEY: ${SECRET_KEY:-change_me_in_production}
      
      # Performance tuning
      WORKERS: ${WORKERS:-4}
      MAX_CONNECTIONS: ${MAX_CONNECTIONS:-100}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - content-automation-network
    # deploy:  # Swarm-only; ignored by docker-compose
    #   resources:
    #     limits:
    #       cpus: '2'
    #       memory: 4G
    #     reservations:
    #       cpus: '1'
    #       memory: 2G

  # --------------------------------------------------------------------------
  # Celery Worker
  # --------------------------------------------------------------------------
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: content-automation-celery
    restart: unless-stopped
    command: poetry run celery -A orchestration.celery_app.app worker --loglevel=info --concurrency=4
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://content_user:${POSTGRES_PASSWORD:-secure_password_change_me}@postgres:5432/content_automation
      REDIS_URL: redis://redis:6379/0
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      ENVIRONMENT: ${ENVIRONMENT:-development}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - content-automation-network
    # deploy:  # Swarm-only; ignored by docker-compose
    #   resources:
    #     limits:
    #       cpus: '2'
    #       memory: 4G
    #     reservations:
    #       cpus: '1'
    #       memory: 2G

  # --------------------------------------------------------------------------
  # Celery Beat (Scheduler)
  # --------------------------------------------------------------------------
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: content-automation-celery-beat
    restart: unless-stopped
    command: poetry run celery -A orchestration.celery_app.app beat --loglevel=info
    depends_on:
      redis:
        condition: service_healthy
    environment:
      REDIS_URL: redis://redis:6379/0
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    volumes:
      - ./logs:/app/logs
    networks:
      - content-automation-network

  # --------------------------------------------------------------------------
  # Flower (Celery Monitoring)
  # --------------------------------------------------------------------------
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: content-automation-flower
    restart: unless-stopped
    command: poetry run celery -A orchestration.celery_app.app flower --port=5555
    depends_on:
      redis:
        condition: service_healthy
    environment:
      REDIS_URL: redis://redis:6379/0
    ports:
      - "5555:5555"
    networks:
      - content-automation-network

  # --------------------------------------------------------------------------
  # pgAdmin (Optional - for development)
  # --------------------------------------------------------------------------
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: content-automation-pgadmin
    restart: unless-stopped
    profiles:
      - dev
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - content-automation-network

# ============================================================================
# Networks
# ============================================================================
networks:
  content-automation-network:
    driver: bridge

# ============================================================================
# Volumes
# ============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local