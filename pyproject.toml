[tool.poetry]
name = "content-automation-pipeline"
version = "1.0.0"
description = "Production-grade NLP-driven content automation with adaptive intelligence"
authors = [{ name = "Mohammad Atashi", email = "mohammadaliatashi@icloud.com" }]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/TensorScholar/content-automation-pipeline"
repository = "https://github.com/TensorScholar/content-automation-pipeline.git"
documentation = "https://github.com/TensorScholar/content-automation-pipeline/blob/main/README.md"
keywords = ["nlp", "content-generation", "automation", "llm", "seo"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Linguistic",
]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.104.1"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
pydantic = "^2.5.0"
asyncpg = "^0.29.0"
redis = "^5.0.1"
celery = "^5.3.4"
sentence-transformers = "^2.2.2"
spacy = "^3.7.2"
openai = "^1.3.7"
anthropic = "^0.7.7"
litellm = "^1.11.1"
beautifulsoup4 = "^4.12.2"
playwright = "^1.40.0"
loguru = "^0.7.2"
tenacity = "^8.2.3"
prometheus-client = "^0.19.0"
httpx = "^0.25.2"
python-dotenv = "^1.0.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
black = "^23.11.0"
isort = "^5.12.0"
mypy = "^1.7.1"
flake8 = "^6.1.0"
pre-commit = "^3.5.0"

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "silent"
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow-running tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["."]
omit = ["*/tests/*", "*/venv/*", "*/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"